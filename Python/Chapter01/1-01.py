# =는 바인딩을 의마한다.
a = 3
# 위 코드가 실행되면 정수 타입의 객체가 메모리에 할당된다.
# 그 다음 메모리에 할당된 객체의 주소를 a라는 변수가 가리킨다.
# 이를 바인딩이라고 한다.
print(id(a)) # 객체의 주소 확인하는 함수
import sys
print(sys.getrefcount(a))
# 변수가 어떤 객체를 바인딩하면 객체의 레퍼런스 카운트값이 증가한다.
b = 3
c = 3
print(sys.getrefcount(b))
print(sys.getrefcount(c))

a = [0, 1, 2]
print(sys.getfcount(a))

# 파이썬에서 모든 값은 어떤 클래스의 인스턴스이다.
# 어떤 변수가 자신을 참조할 때마다 레퍼런스 카운트를 증가시키고
# 참조가 해제되면 레퍼런스 카운트를 감소시킨다.
# 레퍼런스 카운트가 0이 되면 가비지컬렉션에 의해 메모리 할당을 해제한다.
# CPython은 여기에 추가로 세대별 가비지 컬렉션을 사용한다.
